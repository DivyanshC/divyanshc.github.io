[ { "title": "Access servers securely using teleport, tailscale, cloudflare", "url": "/posts/ssh-using-teleport/", "categories": "homelab, domain, cloudflare, teleport, caddy, tailscale", "tags": "homelab, domain, cloudflare, sso, totp, security, teleport, caddy, tailscale", "date": "2022-06-19 17:18:00 +0530", "snippet": "Cloudflared Proxy Check this post here for more details. Point your domain or sub-domain to http://localhost:3080 Tailscale Check this post here for more details. Setup tailscale for all the servers which you want to access using teleport. Installing Teleport Directory structure will be as follows:teleport├── docker-compose.yml├── config│   └── teleport.yaml└── data Create a folder teleport and add this docker-compose.yml file.---version: &quot;3&quot;services: teleport: image: quay.io/gravitational/teleport:9.3.2 container_name: teleport entrypoint: /bin/sh hostname: teleport.example.com # Change this to your domain name command: -c &quot;sleep 1 &amp;amp;&amp;amp; /bin/dumb-init teleport start -c /etc/teleport/teleport.yaml&quot; environment: - TZ=Asia/Kolkata ports: - &quot;3023:3023&quot; - &quot;3024:3024&quot; - &quot;3025:3025&quot; - &quot;3080:3080&quot; volumes: - ./config:/etc/teleport - ./data:/var/lib/teleport restart: unless-stopped networks: - caddy_defaultnetworks: caddy_default: external: True Add this teleport.yaml file in /teleport/config folder. For more details, check this linkversion: v2teleport: nodename: teleport.example.com # Change this to your domain name data_dir: /var/lib/teleport log: output: stderr severity: INFO format: output: text ca_pin: sha256:&amp;lt;your-ca-pin&amp;gt; diag_addr: &quot;&quot;auth_service: enabled: &quot;yes&quot; listen_addr: 0.0.0.0:3025 public_addr: teleport.example.com:3025 # Replace this with your domain name:3025 proxy_listener_mode: multiplexssh_service: enabled: &quot;yes&quot; labels: env: example commands: - name: hostname command: [hostname] period: 1m0sproxy_service: enabled: &quot;yes&quot; web_listen_addr: 0.0.0.0:3080 # public address which caddy hosts in front of Teleport listen_addr: 0.0.0.0:3023 tunnel_listen_addr: 0.0.0.0:3024 Run the following command to start Teleport: docker-compose up -d --force-recreate Get ca_pin running the following command: docker-compose exec teleport tctl status Replace sha256:&amp;lt;your-ca-pin&amp;gt; with the CA pin you got from the above command. Run the following command to create user: docker-compose exec teleport tctl users add &amp;lt;user&amp;gt; --logins=&amp;lt;user&amp;gt;,root --roles=access,editor This command will generate a link to create password and TOTP secret for the &amp;lt;user&amp;gt;. The link will contain 3080 port number, change this to 443 or remove :3080 from the link if you are using it over your cloudflare DNS. Use the link as it is if using tailscale DNS. Adding Nodes Run the following command to add nodes: docker exec teleport tctl nodes add This will show you auth_token and ca_pin for the node. Copy as we will need this later. Install Teleport on the node using the installation page. Now create teleport.yaml file on the node in /etc folder. teleport: nodename: &amp;lt;Any name of the node&amp;gt; data_dir: /var/lib/teleport auth_token: &amp;lt;auth_token&amp;gt; auth_servers: # Replace this with the IP address of the node which will able to access the Teleport cluster - &amp;lt;teleport.example.com_or_tailscale-ip_or_tailscale_DNS&amp;gt;:3025 log: output: stderr severity: INFO ca_pin: sha256:&amp;lt;your-ca-pin&amp;gt; #advertise_ip: This server IP addressauth_service: enabled: nossh_service: enabled: yesproxy_service: enabled: no If you don’t want to open any port then use tailscale IP or DNS name instead of cloudflare registered domain name. If port 3025 is open on the main teleport server (cluster) then use teleport.example.com. Remove /var/lib/teleport/ if it already exists using the following command: sudo rm -rf /var/lib/teleport/ Open 3022 port on this server (node) by running the following command: sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 3022 -j ACCEPTsudo netfilter-persistent save Can also open port using ufw: sudo ufw allow 3022 We want to use /etc/teleport.yaml for our config. Check /usr/lib/systemd/system/teleport.service file for the following line, if something different then replace it with the following: ExecStart=/usr/local/bin/teleport start --config=/etc/teleport.yaml --pid-file=/run/teleport.pid Run the following commands to start Teleport as a systemd service: sudo systemctl enable teleport.service Start the service, replace start with restart if you want to restart the service. sudo systemctl start teleport Check the status of Teleport using the following command: sudo systemctl status teleport Now check on your teleport dashboard you will able to connect to your servers. Using Caddy for SSL, Teleport over tailscale for accessing it over private vpn network Install Caddy from page. Add the following line to the Caddyfile file: machine-name.domain-alias.ts.net { reverse_proxy teleport:3080 { transport http { tls tls_insecure_skip_verify } }} You can run both cloudflared and caddy on the same machine simultaneously to access the Teleport cluster.Setup without opening or forwarding any ports Use cloudflared which don’t require any port to be open or any port to be forwarded. So no port opening of 3080 is required. Use tailscale DNS for accessing the Teleport cluster auth service. So no port opening of 3025 is required. " }, { "title": "Enhancing security on services using crowdsec, watchtower, authelia, traefik", "url": "/posts/basic-security-measures-services/", "categories": "homelab, domain, cloudflare, traefik, authelia, watchtower, crowdsec", "tags": "homelab, domain, cloudflare, traefik, authelia, sso, totp, watchtower, crowdsec, security", "date": "2022-06-18 15:03:00 +0530", "snippet": "Cloudflare Choose cloudflare proxy whenever you are pointing a domain to a service. It will show the IP of cloudflare proxy instead of our server.Ports Only open ports that are required for the service.SSH Use tailscale for SSH.Traefik Check for traefik installation and setup here.Authenticating with authelia Check this post here.Adding watchtower to auto update docker images This service will be used to auto update the docker images of the services every 24 hours (default). It will send the necessary logs via notifications. Check this link for more details. Create a folder watchtower and add this docker-compose.yml file. version: &quot;3&quot;services: watchtower: image: containrrr/watchtower container_name: &quot;watchtower&quot; volumes: - /var/run/docker.sock:/var/run/docker.sock environment: - TZ=Asia/Kolkata - WATCHTOWER_NOTIFICATIONS=slack - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=&quot;https://hooks.slack.com/services/x/y/z&quot; - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower - WATCHTOWER_NOTIFICATION_SLACK_CHANNEL=#watchtower # - WATCHTOWER_RUN_ONCE=true Update WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL with your slack webhook url.Adding ratelimit to servicesCheck this page.Adding IP whitelist middleware to traefik Add IP whitelist middleware in traefik to allow only the following cloudflare IP’s to access the services. Add this in config.yml file: middlewares: cloudflare-ipwhitelist: ipWhiteList: sourceRange: - 173.245.48.0/20 - 103.21.244.0/22 - 103.22.200.0/22 - 103.31.4.0/22 - 141.101.64.0/18 - 108.162.192.0/18 - 190.93.240.0/20 - 188.114.96.0/20 - 197.234.240.0/22 - 198.41.128.0/17 - 162.158.0.0/15 - 104.16.0.0/13 - 104.24.0.0/14 - 172.64.0.0/13 - 131.0.72.0/22 Apply this middleare to your external services in config.yml using below lines.middlewares: - cloudflare-ipwhitelist Apply this middleware to all services by adding below lines to traefik.yml.entryPoints: web: address: :80 # (Optional) Redirect to HTTPS # --- http: middlewares: - cloudflare-ipwhitelist@file - services-ratelimit@file redirections: entryPoint: to: websecure scheme: https websecure: address: :443 http: middlewares: - cloudflare-ipwhitelist@file - services-ratelimit@file You can add multiple middlewares to the entryPoint. Remember that order of the middlewares is important.Adding crowdsec middleware to traefik Directly structure will look like this:crowdsec/├── config│ └── acquis.yaml├── docker-compose.yml└── update_and_upgrade.sh3 directories, 2 files Create a folder crowdsec and add this docker-compose.yml file.version: &quot;3.8&quot;services: crowdsec: image: crowdsecurity/crowdsec:latest container_name: crowdsec environment: TZ: &quot;Asia/Kolkata&quot; GID: &quot;${GID-1000}&quot; COLLECTIONS: &quot;crowdsecurity/linux crowdsecurity/traefik&quot; POSTOVERFLOWS: &quot;crowdsecurity/cdn-whitelist&quot; # depends_on: #uncomment if running traefik in the same compose file # - &#39;traefik&#39; volumes: - ./config/acquis.yaml:/etc/crowdsec/acquis.yaml - ./crowdsec-db:/var/lib/crowdsec/data/ - ./crowdsec-config:/etc/crowdsec/ - traefik_traefik-logs:/var/log/traefik/:ro networks: - traefik_default restart: unless-stoppednetworks: traefik_default: external: truevolumes: traefik_traefik-logs: # this will be the name of the volume from trarfic logs external: true # remove if traefik is running on same stack Use this as template to create traefik-logs volume and logs settings in traefik.yml file. Create a config folder in crowdsec folder and add this acquis.yaml file. filenames: - /var/log/traefik/*labels:type: traefik Create a update_and_upgrade.sh file in the crowdsec folder and add this content: #!/bin/shdocker exec crowdsec cscli hub updatedocker exec crowdsec cscli hub upgrade Run this file as a cron job to update and upgrade the crowdsec hub. (running every hour) 0 * * * * /path_to_directory/crowdsec/update_and_upgrade.sh Getting the crowdsec bouncer api key, run the following command: docker exec crowdsec cscli bouncers add bouncer-traefik Store this api key as it will be used in the next step and will not be shown again. Add this bouncer-traefik service in the same docker compose file. bouncer-traefik: image: docker.io/fbonalair/traefik-crowdsec-bouncer:latest container_name: bouncer-traefik environment: TZ: &quot;Asia/Kolkata&quot; CROWDSEC_BOUNCER_API_KEY: &quot;&amp;lt;crowdsec_bouncer_api_key_generated_above&amp;gt;&quot; CROWDSEC_AGENT_HOST: crowdsec:8080 networks: - traefik_default # same network as traefik + crowdsec depends_on: - crowdsec restart: unless-stopped Run the docker-compose up command to start the crowdsec hub and bouncer. docker-compose up -d --force-recreate Add the following lines to config.yml file of traefik. middlewares: crowdsec-bouncer: forwardauth: address: http://bouncer-traefik:8080/api/v1/forwardAuth trustForwardHeader: true Add this middleware to every service,add below lines to traefik.yml of traefik.entryPoints: web: address: :80 # (Optional) Redirect to HTTPS # --- http: middlewares: - crowdsec-bouncer@file - cloudflare-ipwhitelist@file - services-ratelimit@file redirections: entryPoint: to: websecure scheme: https websecure: address: :443 http: middlewares: - crowdsec-bouncer@file - cloudflare-ipwhitelist@file - services-ratelimit@file Restart the traefik service. To see crowdsec hub metrics use the following command: docker exec crowdsec cscli metrics To see status of collections, parsers, postoverflows etc use the following command: docker exec crowdsec cscli hub list To see alerts list use the following command: docker exec crowdsec cscli alerts list To inspect alerts use the following command: docker exec crowdsec cscli alerts inspect -d &amp;lt;alert-id&amp;gt; To see banned IPs use the following command: docker exec crowdsec cscli decisions list To ban IPs use the following command: docker exec crowdsec cscli decisions add --ip &amp;lt;ip&amp;gt; To unban IPs use the following command: docker exec crowdsec cscli decisions delete --ip &amp;lt;ip&amp;gt; " }, { "title": "Using tailscale to access services privately on your personal VPN mesh network using SSL", "url": "/posts/using-tailscale-to-access-services/", "categories": "homelab, domain, cloudflare, traefik, caddy, tailscale, vaultwarden", "tags": "homelab, domain, cloudflare, traefik, caddy, tailscale, VPN, private-VPN, SSL, vaultwarden", "date": "2022-06-17 11:24:00 +0530", "snippet": "TailscaleSetup tailscale Install tailscale using this guide. Check if tailscale is running as a service. sudo systemctl status tailscale If not running, start it. sudo systemctl start tailscale Enable for automatic startup. sudo systemctl enable tailscale Run the following command to run the tailscale service: sudo tailscale up Check your ip and all other connected services using this command: tailscale status Some features of tailscale You can also access services using the dashboard. You can now access tailscale server over the ip or name of the server which you get from the tailscale status command. You don’t need to have any ports open on the server to communicate with it, you can ssh and access that server without opening port 22 on that server. You can access services hosted on other servers using tailscale privately, only accessible through your personal tailscale VPN mesh network. You can use some server running tailscale as your VPN server for routing all your traffic through it. Check more on exit node here. You can send or receive files using tailscale on all your connected devices. Check more on here. Access your service over HTTPS on tailscale We are using tailscale to setup vaultwarden on our tailscale network. It will only be accessible from the devices connected to our tailscale network. We will see two ways on how to setup vaultwarden on our tailscale network using reverse proxy. You can also use authelia to connect vaultwarden to internet for extra security. (But by using authelia you will not able to connect your extension or apps to your vaultwarden service.) Add https://machine-name.domain-alias.ts.net to your SELF-HOSTED ENVIRONMENT &amp;gt; Server URL on your vaultwarden apps and browser extension to access your service. 1. Traefik Create a folder vaultwarden and add this docker-compose.yml file.version: &quot;3&quot;services: vaultwarden: image: vaultwarden/server:latest container_name: vaultwarden volumes: - ./data:/data/ # ports: # - 8081:80 restart: unless-stopped networks: - traefik_default labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.vaultwarden.entrypoints=websecure&quot; - &quot;traefik.http.routers.vaultwarden.rule=Host(`machine-name.domain-alias.ts.net`)&quot; - &quot;traefik.http.routers.vaultwarden.tls=true&quot; # - &quot;traefik.http.services.vaultwarden.loadbalancer.server.port=80&quot; # - &#39;traefik.http.routers.vaultwarden.middlewares=authelia@docker&#39;networks: traefik_default: external: true Vaultwarden on works when using SSL. Check this page here. Enable HTTPS by going to this page. Also enable Magic DNS to use the domain name of the server by going to this page. You will get Tailnet domain alias for the server in the end of this page. Example: *.domain-alias.ts.net. You can access your service over https using this type of domain : https://machine-name.domain-alias.ts.net. Know your domain easily by running just this command, it will show your domain: tailscale cert Get SSL certificate from Let’s Encrypt using this command:sudo tailscale cert &quot;machine-name.domain-alias.ts.net&quot; You can run the above command again for getting the updated certificate again if the certificate gets expired. This will generate a SSL cert and key file for the domain in the current directory and in /var/lib/tailscale/certs (You can also mount this directory to docker as :ro also). Add the following to /etc/traefik/config.yml file: tls: # Standalone TLS configuration (do not paste this under any section) certificates: # traefik will match your domain name with the certificate name - certFile: /etc/traefik/tailscale/certs/machine-name.domain-alias.ts.net.crt keyFile: /etc/traefik/tailscale/certs/machine-name.domain-alias.ts.net.key2. Caddy Check this on how to install Caddy. Add these lines to docker-compose.yml file in caddy folder: volumes: - /var/run/tailscale/tailscaled.sock:/var/run/tailscale/tailscaled.sock:ro This tailscaled.sock will enable to get SSL automatically and renew the certificate automatically. Now the docker-compose.yml for vaultwarden will be the following: version: &quot;3&quot;services: vaultwarden: image: vaultwarden/server:latest container_name: vaultwarden volumes: - ./data:/data/ # ports: # - 8081:80 restart: unless-stopped networks: - caddy_defaultnetworks: caddy_default: external: true Add these lines to Caddyfile in caddy folder:machine-name.domain-alias.ts.net { reverse_proxy vaultwarden:80}If running caddy without docker First check which user is running caddy by running this command: ps aux | grep caddy If you are running caddy without docker then add this line to /etc/default/tailscaled: TS_PERMIT_CERT_UID=caddy This will allow caddy to access tailscaled.sock file to obtain SSL certificates. " }, { "title": "Adding authentication to services using authelia, traefik", "url": "/posts/adding-authentication-to-services/", "categories": "homelab, domain, cloudflare, traefik, authelia", "tags": "homelab, domain, cloudflare, traefik, authelia, sso, totp", "date": "2022-06-16 16:18:00 +0530", "snippet": "Adding Single Sign On and 2 Factor Auth (TOTP) using Authelia middleware for traefikTraefik You can check this section on how to install traefik.Authelia Add a DNS record for auth.example.com pointing to the server running traefik. This is how your directory for authelia will look like: authelia/├── config│   ├── configuration.yml│   ├── db.sqlite3│   ├── notification.txt│   └── users_database.yml└── docker-compose.yml1 directory, 5 files Use docker-compose.yml as mentioned below. (Make a directory named authelia and copy the file to that directory) version: &quot;3&quot;services: authelia: image: authelia/authelia container_name: authelia volumes: - ./config:/config networks: - traefik_default labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.authelia.rule=Host(`auth.example.com`)&quot; - &quot;traefik.http.routers.authelia.entrypoints=websecure&quot; - &quot;traefik.http.routers.authelia.tls=true&quot; - &quot;traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://auth.example.com&quot; - &quot;traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true&quot; - &quot;traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email&quot; # expose: # - 9091 restart: unless-stopped environment: - TZ=Asia/Kolkata healthcheck: disable: truenetworks: traefik_default: external: true Create a config folder inside authelia main folder. Add the below yaml to configuration.yml file in config folder. ---################################################################ Authelia configuration ################################################################server: host: 0.0.0.0 port: 9091log: level: debugtheme: dark# This secret can also be set using the env variables AUTHELIA_JWT_SECRET_FILEjwt_secret: a_long_character_string_like_this_with_any_number_and_charactersdefault_redirection_url: https://auth.example.comtotp: issuer: authelia.com# duo_api:# hostname: api-123456789.example.com# integration_key: ABCDEF# # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY_FILE# secret_key: 1234567890abcdefghifjklauthentication_backend: file: path: /config/users_database.yml password: algorithm: argon2id iterations: 1 salt_length: 16 parallelism: 8 memory: 64access_control: default_policy: deny rules: # Rules applied to everyone - domain: a.example.com policy: bypass - domain: - example.com subject: - &quot;user:&amp;lt;Username&amp;gt;&quot; - &quot;user:&amp;lt;Username&amp;gt;&quot; #- &quot;group:&amp;lt;Group_Name&amp;gt;&quot; #- &quot;group:&amp;lt;Group_Name&amp;gt;&quot; # [,] this is AND above one is OR policy: one_factor - domain: - b.example.com - c.example.com subject: - &quot;user:&amp;lt;Username&amp;gt;&quot; policy: two_factor # - domain: pve1.local.example.com # policy: two_factorsession: name: authelia_session # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE secret: unsecure_session_secret expiration: 3600 # 1 hour inactivity: 300 # 5 minutes domain: example.com # Should match whatever your root protected domain is # redis: # host: redis # port: 6379 # # This secret can also be set using the env variables AUTHELIA_SESSION_REDIS_PASSWORD_FILE # # password: autheliaregulation: max_retries: 3 find_time: 120 ban_time: 300storage: encryption_key: a_long_character_string_like_this_with_any_number_and_characters # Now required local: path: /config/db.sqlite3notifier: #smtp: # username: name # # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE # password: password # host: smtp.gmail.com # port: 25 # sender: authelia@example.com filesystem: filename: /config/notification.txt You will get forgot password, TOTP genration link in your email if you have configured an email notifier. If you have not configured an email notifier, you will get a link in your /config/notification.txt. Same goes for the other notifications like 2 Factor Auth (TOTP). Add the below yaml to users_database.yml file to config folder. ---################################################################ Users Database ################################################################# This file can be used if you do not have an LDAP set up.# List of usersusers: username_1: displayname: &quot;name_1&quot; # Password is Authelia, generate your own hash using argon2id algorithm password: &quot;$argon2id$v=19$m=65536,t=1,p=8$cUI4a0E3L1laYnRDUXl3Lw$ZsdsrdadaoVIaVj8NltA8x4qVOzT+/r5GF62/bT8OuAs&quot; email: &amp;lt;email&amp;gt; - admins_group - dev_group username_2: displayname: &quot;name_2&quot; # Password is Authelia, generate your own hash using argon2id algorithm password: &quot;$argon2id$v=19$m=65536,t=1,p=8$cUI4a0E3L1laYnRDUXl3Lw$ZsdsrdadaoVIaVj8NltA8x4qVOzT+/r5GF62/bT8OuAs&quot; email: &amp;lt;email&amp;gt; - dashboard Generate the hashed password for users using the following command.docker run authelia/authelia:latest authelia hash-password &#39;yourpassword&#39; Replace the password with the generated hash.Enable authelia for servicesDocker Add the below line to docker-compose.yml file for the docker service you want to get behind authentication.labels: - &quot;traefik.http.routers.traefik.middlewares=authelia@docker&quot;Services outside docker Below shown is an example of how to enable authelia for services outside docker. You have to add the below line to your traefik’s config file.middlewares: #order matters authelia: forwardAuth: address: &quot;http://authelia:9091/api/verify?rd=https://auth.example.com&quot; Now add this middleware to your service’s routers section. Check this section for more details. Example: http: routers: # Define a connection between requests and services to-whoami: entryPoints: - &quot;websecure&quot; rule: &quot;Host(`example.com`) &amp;amp;&amp;amp; PathPrefix(`/whoami/`)&quot; # If the rule matches, applies the middleware middlewares: - authelia - services-user tls: {} service: whoami" }, { "title": "Connecting services to internet using reverse proxy", "url": "/posts/connect-services-to-internet/", "categories": "homelab, domain, cloudflare, services, internet, traefik, nginx, letsencrypt, tunnel, ssl, tls, email, forward", "tags": "homelab, domain, cloudflare, services, internet, traefik, nginx, letsencrypt, tunnel, ssl, tls, email, forward, caddy, reverse, proxy, connect, cloudflared-tunnel, tunnel", "date": "2022-06-04 16:33:00 +0530", "snippet": "Exposing your services to the internet using SSLWe have a domain but the tricky part is how to connect that domain to our service.Here comes the part of reverse proxy and cloudflare tunnel.We have different services running at different ports and we want to expose them to the internet on different apex domains and sub domains.DNS EntryYou will have to point your domain or subdomain on your DNS to the server on which you will run your services using reverse proxy. No need to do this if you are using a cloudflare tunnel.Add a DNS A record for the apex domain and point it to your server’s IP address.If your apex domain point to a server, you also want your subdomain to point to that same server then add a CNAME record for the subdomain and point it to the apex domain.1. Cloudflare TunnelIt is the easiest of them all.There is no need to open any ports or do any port forwarding for the router. Go to Cloudflare dashboard Select your domain &amp;gt; click on access tab and then click on Launch Zero Trust. This will open a zero trust dashboard, then got to Access &amp;gt; Tunnels &amp;gt; Create a tunnel. Give you tunnel a name then click on next, choose your os environment then appropriately install cloudflared connector and click on next. (Do not install docker for arm64) Click on Add a public hostname,then provide your subdomain name, select your subdomain. In service section, select http if service don’t have SSL certificate, then enter **localhost:** of your application. Then click on save hostname. (You can add multiple hostnames for different services). It will add subdomain to your DNS automatically. Check if cloudflared service running : Run the following command in your terminal.sudo systemctl status cloudflaredIf not running then run the following command in your terminal.sudo systemctl start cloudflaredCheck if service is enabled for running on boot.sudo systemctl is-enabled cloudflaredIf not enabled then run the following command in your terminal.sudo systemctl enable cloudflaredTry restarting the servicesudo systemctl restart cloudflaredIf it does not start then we have create a cert.pem file which is the origincert flag file.There are two ways to create a cert.pem file :1. Through TerminalType the following command in your terminal.cloudflared tunnel loginIt will open a browser window showing Authorize Cloudflare Tunnel.Click on your domain name and then click on Authorize.It will automatically add a cert.pem file in your /home/&amp;lt;USER&amp;gt;/.cloudflared/ directory.Then try restarting the cloudflared service again.2. Through Browser and downloading the cert.pem fileOpen this Argo Tunnel link &amp;gt; Select your domain &amp;gt; Authorize &amp;gt; Download the certificate.Then copy the cert.pem file to your /etc/cloudflared directory.Then try restarting the cloudflared service again.2. Reverse Proxy ManagerThere are many reverse proxy managers available like caddy, nginx proxy manager, traefik etc.For this you will need your domain or subdomain to point to your server’s IP address. See this DNS Entry section.Respective ports should be opened and port forwarding has to be done for the router.1. Caddy Open the installation page here. If you want to install on the host machine. We will use docker for this. Use docker-compose.yml as mentioned below. (Make a directory named caddy and copy the file to that directory) version: &quot;3.7&quot;services: caddy: image: caddy:latest container_name: caddy restart: unless-stopped ports: - &quot;80:80&quot; - &quot;443:443&quot; volumes: - ./Caddyfile:/etc/caddy/Caddyfile # - $PWD/site:/srv - ./caddy_data:/data - ./caddy_config:/config - ./certs:/etc/certs/origin_cloudflareIt’s very simple with caddy just add the following to your Caddyfile.#{# acme_ca https://acme-staging-v02.api.letsencrypt.org/directory#}caddy.example.com { #tls /etc/certs/origin_cloudflare/ssl_origin_certificate.cert /etc/certs/origin_cloudflare/ssl_origin_certificate_key.pem reverse_proxy nginx:80} Run command in your terminal to run the caddy docker. docker-compose up -d --force-recreate We will use nginx as an example here. First we will create a nginx docker. version: &quot;3&quot;services: nginx: image: nginx:latest container_name: nginx restart: unless-stopped # ports: # - &quot;1080:80&quot; networks: - caddy_defaultnetworks: caddy_default: external: True Don’t use proxy when adding DNS record to cloudflare when first getting letsenrypt certificate. (It needs to check if domain is pointing to the server ip or not, You can after certificate is obtained) Caddy will automatically generate a SSL certificate for you from the Let’s Encrypt server. (Make sure you have ports 80 and 443 open in your firewall or your server vnc because by default it uses http challenge to get the certificate.) First try with staging SSL certificate by using the following command at the top of caddyfile. If everything work fine then comment out the following line as showing in our caddyfile. (We are using staging SSL certificate here because there is a rate limit for production SSL certificate.) { acme_ca https://acme-staging-v02.api.letsencrypt.org/directory} If you want to use custom SSL certificate then use the following line. tls /etc/certs/origin_cloudflare/ssl_origin_certificate.cert /etc/certs/origin_cloudflare/ssl_origin_certificate_key.pem To get custom certificates from cloudflare check this 2. Installing Nginx Proxy Manager Open the installation guide. Use docker-compose.yml as mentioned below. (Make a directory named nginx_proxy_manager and copy the file to that directory) version: &quot;3&quot;services: app: image: &quot;jc21/nginx-proxy-manager:latest&quot; container_name: &quot;nginx-proxy-manager&quot; restart: unless-stopped ports: - &quot;80:80&quot; - &quot;81:81&quot; - &quot;443:443&quot; volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt networks: - npmnetworks: npm:Now run the following command in your terminal.docker-compose up -dThen check if docker created our network.docker network listIt will show the network name as &amp;lt;FOLDER_NAME&amp;gt;_npm.name : nginx_proxy_manager_npmdriver : bridgescope : localNow for example lets say you want to host vaultwarden on port 8080.Use the docker network command as follows in docker-compose.yml file of that service. See the networks part.version: &quot;3&quot;services: vaultwarden: image: vaultwarden/server:latest container_name: vaultwarden networks: - nginx_proxy_manager_npm volumes: - ./data:/data/ ports: - 8080:80 restart: unless-stoppednetworks: nginx_proxy_manager_npm: external: trueHere external flag is used to connect to a network which is already created.Now go to the http://&amp;lt;localhost_or_your_ip&amp;gt;:81 for nginx proxy manager dashboard.Adding SSL Certificate Got to SSL Certificates tab. Then click on Add SSL Certificate.There are two ways to get SSL certificate :1. Through Letsencrypt Enter the apex domain, wildcard subdomain name in the Domain Names field. (eg. example.com, *.example.com) Enter any email address from which you want to receive the certificate. Check on DNS Challenge checkbox. Choose DNS provider as cloudflare. (You have to use DNS challenge if you want wildcard subdomain.) It will showCredentials file content field.You want an API token from cloudflare: Go to cloudflare dashboard &amp;gt; Overview &amp;gt; Get your API token (bottom right hand side). Click on create token &amp;gt;use template of edit zone DNS &amp;gt; Under zone resources change specific zone to all zones &amp;gt; click on continue to summary &amp;gt; click on create token. Copy the token and save it (it will not be shown later or just create a new one if lost). Copy this edit zone dns api token here as shown below: # Cloudflare API tokendns_cloudflare_api_token = &amp;lt;ADD_YOUR_API_TOKEN&amp;gt; Click on I Agree then Save. It will take some time to generate the certificate.This certificate will only last upto 3 months then we have to renew it.2. Through Cloudflare Go to cloudflare dashboard &amp;gt; SSL/TLS &amp;gt; Origin Server &amp;gt; Create Certificate. Select 15 years for certificate validity &amp;gt; Create. Save Origin Certificate as &amp;lt;filename&amp;gt;.pem and Private Key as &amp;lt;filename&amp;gt;.key Now go to nginx proxy manager dashboard and click on SSL Certificates &amp;gt; Add SSL Certificate &amp;gt; Custom. Give any name, certificate key will be &amp;lt;filename&amp;gt;.key and certificate will be &amp;lt;filename&amp;gt;.pem &amp;gt; Click on Save. It will take some time to generate the certificate. Adding a service to a domain or subdomain Go to nginx proxy manager dashboard &amp;gt; Hosts &amp;gt; Proxy Hosts &amp;gt; Add proxy host. Under domain names enter the domain name or subdomain name. Select http. Hostname/IP will be name of our docker container which is on the same network as nginx proxy manager or IP of your server when not running in docker. (You can also provide IP of your docker container but it will change after every restart.) To Check IP of your docker container use the following command in your terminal :docker inspect &amp;lt;CONTAINER_NAME_OR_ID&amp;gt; | grep &#39;&quot;IPAddress&quot;&#39; | tail -n1 Port will be the internal port of the service which is running in docker (8080:80 then 80) or the service port when not running in docker. Tick all the checkboxes &amp;gt; Got to SSL Certificates &amp;gt; Select the appropriate certificate &amp;gt; Tick all the checkboxes &amp;gt; Click on Save. 3. Installing TraefikThis one is bit complicated because Traefik allows various implementations of configuration.First create a traefik folder in which we will install traefik.The overall file structure is as follows.traefik/├── docker-compose.yml└── etc └── traefik ├── certs │   ├── acme.json │   ├── cert-key.pem │   └── cert.cert ├── config.yml └── traefik.yml3 directories, 6 filesThen create a docker-compose.yml file in that folder.version: &quot;3&quot;services: traefik: image: &quot;traefik:latest&quot; container_name: &quot;traefik&quot; restart: &quot;unless-stopped&quot; environment: - TZ=Asia/Kolkata # - CF_API_EMAIL=your_cloudflare_email # - CF_DNS_API_TOKEN=your_cloudflare_api_token # - CF_API_KEY=YOU_API_KEY # be sure to use the correct one depending on if you are using a token or key ports: - &quot;80:80&quot; - &quot;443:443&quot; # (Optional) Expose Dashboard # - &quot;8082:8080&quot; # Don&#39;t do this in production! volumes: - ./etc/traefik:/etc/traefik - /var/run/docker.sock:/var/run/docker.sock:ro - traefik-logs:/var/log/traefik labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.traefik.entrypoints=websecure&quot; - &quot;traefik.http.routers.traefik.rule=Host(`traefik.example.com`)&quot; - &quot;traefik.http.middlewares.traefik-auth.basicauth.users=USER:BASIC_AUTH_PASSWORD&quot; - &quot;traefik.http.routers.traefik.middlewares=traefik-auth&quot; - &quot;traefik.http.routers.traefik.tls=true&quot; - &quot;traefik.http.services.traefik.loadbalancer.server.port=8080&quot; # - &quot;traefik.http.routers.traefik-secure.tls=true&quot; # - &quot;traefik.http.routers.traefik-secure.tls.certresolver=cloudflare&quot; # - &quot;traefik.http.routers.traefik-secure.tls.domains[0].main=example.com&quot; # - &quot;traefik.http.routers.traefik-secure.tls.domains[0].sans=*.example.com&quot; # - &quot;traefik.http.routers.traefik-secure.service=api@internal&quot;volumes: traefik-logs:Adding authentication for the traefik dashboard in above yml. Install :sudo apt updatesudo apt install apache2-utils Create a user:password for the dashboard.echo $(htpasswd -nb &amp;lt;USER&amp;gt; &amp;lt;PASSWORD&amp;gt;) | sed -e s/\\\\$/\\\\$\\\\$/gHere is the username and is the password.Replace USER:BASIC_AUTH_PASSWORD with the generated string.If you want letsenrypt SSL certificates then you can use appropriate certresolver.I am using cloudflare as my DNS provider.Then create etc &amp;gt; traefik folder in traefik folder.mkdir -p etc/traefikThen create a traefik.yml file in /traefik/etc/traefik folder.This is a static configuration for traefik. It will use this at the start of traefik container.global: checkNewVersion: true sendAnonymousUsage: false # true by default# (Optional) Log information# ---# log:# level: DEBUG # DEBUG, INFO, WARNING, ERROR, CRITICAL# format: common # common, json, logfmt# filePath: /var/log/traefik/traefik.log# (Optional) Accesslog# ---# accesslog:# format: common # common, json, logfmt# filePath: /var/log/traefik/access.log# (Optional) Enable API and Dashboard# ---api: dashboard: true # true by default insecure: true # Don&#39;t do this in production!# Entry Points configuration# ---entryPoints: web: address: :80 # (Optional) Redirect to HTTPS # --- http: middlewares: # middleware that works for every request - services-ratelimit@file redirections: entryPoint: to: websecure scheme: https websecure: address: :443 http: middlewares: # middleware that works for every request - services-ratelimit@file# Configure your CertificateResolver here...# ---certificatesResolvers: # Don&#39;t use proxy when adding DNS record to cloudflare when first getting letsenrypt certificate (You can after certificate is obtained)staging: # Open ports 80 and 443 in firewall acme: email: your_email_address_for_letsencrypt storage: /etc/traefik/certs/acme.json caServer: &quot;https://acme-staging-v02.api.letsencrypt.org/directory&quot; httpChallenge: entryPoint: webproduction: # Open ports 80 and 443 in firewall acme: email: your_email_address_for_letsencrypt storage: /etc/traefik/certs/acme.json caServer: &quot;https://acme-v02.api.letsencrypt.org/directory&quot; httpChallenge: entryPoint: webcloudflare: # Open ports 80 and 443 in firewall acme: email: your_email_address_for_letsencrypt storage: /etc/traefik/certs/acme.json dnsChallenge: provider: cloudflare resolvers: - &quot;1.1.1.1:53&quot; - &quot;1.0.0.1:53&quot;# (Optional) Overwrite Default Certificatestls: stores: default: defaultCertificate: certFile: /etc/traefik/certs/cert.cert keyFile: /etc/traefik/certs/cert-key.pem # (Optional) Disable TLS version 1.0 and 1.1 options: default: minVersion: VersionTLS12providers: docker: exposedByDefault: false # Default is true file: # watch for dynamic configuration changes directory: /etc/traefik watch: true # filename: /etc/traefik/config.ymllog: level: &quot;INFO&quot; filePath: &quot;/var/log/traefik/traefik.log&quot;accessLog: filePath: &quot;/var/log/traefik/access.log&quot;If you want any dynamic configuration then add a config.yml file in /traefik/etc/traefik folder. This is used for any other networking services that we need. (Also to communicate with services that don’t use docker cotainer.)This is an example of config.yml file. Traefik will watch for changes in this file and reload the configuration. This file is not necessary.# http routing sectionhttp: routers: # Define a connection between requests and services to-whoami: entryPoints: - &quot;websecure&quot; rule: &quot;Host(`example.com`) &amp;amp;&amp;amp; PathPrefix(`/whoami/`)&quot; # If the rule matches, applies the middleware middlewares: - services-user tls: {} # SSL termination configuration leave empty to send this service request to http endpoint # If the rule matches, forward to the whoami service (declared below) service: whoami services: # Define how to reach an existing service on our infrastructure whoami: loadBalancer: servers: # use host.docker.internal instead of &amp;lt;private-ip&amp;gt; for accessing the service from the host machine - url: http://&amp;lt;private-ip&amp;gt;:8000 middlewares: # Here, an average of 100 requests per second is allowed. # In addition, a burst of 50 requests is allowed. services-ratelimit: rateLimit: average: 100 burst: 50 # Define an authentication mechanism services-user: basicAuth: users: # Replace **USER:BASIC_AUTH_PASSWORD** with the generated string - USER:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/Now add a certs folder in this /traefik/etc/traefik folder.mkdir certsThen create acme.json file. It has to be created for traefik to run. It will be used by traefik to store certificates as shown in yml.{ &quot;email&quot;: &quot;your_email_address_for_letsencrypt&quot;, &quot;storage&quot;: &quot;/etc/traefik/certs/acme.json&quot;,}touch acme.jsonchmod 600 acme.json Don’t use proxy when adding DNS record to cloudflare when first getting letsenrypt certificate. (It needs to check if domain is pointing to the server ip or not, You can after certificate is obtained) If you want to use letsencrypt SSL certificates then you can use the appropriate certresolver as staging or production. (These will be stored in acme.json, if using staging as your certresolver then delete all contents of acme.json file first then use production certresolver.) If you want to use custom certificates then add the following lines in config.yml file. # Standalone TLS configuration (do not paste this under any section)tls: # Use this for custom SSL certs other than default one set in traefik.yml certificates: # traefik will match your domain name with the certificate name (without .com) - certFile: /path/to/other-domain-name.cert keyFile: /path/to/other-domain-name.key If you have obtained your coudflare SSL certificates then you can store them in the certs folder. For more info to get your cloudflare SSL certificates read this cloudflare ssl certificate. cert.cert: contains the certificate cert-key.pem: contains the private keyThen start your traefik container by running the following command by going to the /traefik folder where docker compose file is added.docker-compose up -d --force-recreateExample of a docker container using traefik.We will use nginx as our example container.First create a new folder named nginx on your machine. Then add docker-compose.yml file in this folder.version: &quot;3&quot;services: nginx: image: nginx:latest container_name: nginx restart: unless-stopped networks: - traefik_default # ports: # - &quot;80:80&quot; labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.nginx.entrypoints=websecure&quot; - &quot;traefik.http.routers.nginx.rule=Host(`nginx.example.com`)&quot; - &quot;traefik.http.routers.nginx.tls=true&quot; # - &quot;traefik.http.routers.nginx.tls.certresolver=production&quot; # use this if you want to use LetsEncrypt SSL certificates - &quot;traefik.http.services.nginx.loadbalancer.server.port=80&quot;networks: traefik_default: external: trueThings to remember while creating docker-compose.yml file for a container which uses traefik. traefik.enable=true: This is required to enable traefik to know which container wants to use traefik. traefik.http.routers.nginx.entrypoints=websecure: This is required to enable traefik to watch https (:443) port as entrypoint for this service. traefik.http.routers.nginx.rule=Host(nginx.example.com): This is required to enable traefik to watch nginx.example.com as hostname for this service. traefik.http.routers.nginx.tls=true: This is required to enable traefik to use SSL. traefik.http.routers.nginx.tls.certresolver=production: This is required to enable traefik to use LetsEncrypt SSL certificates. (staging or production) traefik.http.services.nginx.loadbalancer.server.port=80: This is required to enable traefik to send traffic to this docker container at port 80. This is the format traeffic uses to send traffic toyour container.If you want to add a middleware like authelia for authentication before accessing the service then you can add it as a label to the nginx docker-compose.yml file as shown below.- &quot;traefik.http.routers.nginx.middlewares=authelia@docker&quot;Now the traefik map will look like this.Connect services running on host machine from reverse proxy running in docker container First check the port is open on the host machine. You can use the following command to check if port is accepting connections. (If a service is in docker container, docker will automatically add rules to iptables to allow connections to the port) Using iptables sudo iptables -S | grep &amp;lt;PORT_NUMBER&amp;gt; If port is not shown in the list or it is showing REJECT then you can use the following command to open the port. sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport &amp;lt;PORT_NUMBER&amp;gt; -j ACCEPT This iptables change will not persist after restart. So you can use the following command to save the changes. sudo netfilter-persistent save Using ufw firewall sudo ufw status If port is not shown in the list or it is showing deny then you can use the following command to open the port. sudo ufw allow &amp;lt;PORT_NUMBER&amp;gt; Add an environment variable to your docker-compose.yml file. extra_hosts: - host.docker.internal:$HOST_GATEWAY Adding the following in script.sh file. #!/bin/bashexport HOST_GATEWAY=$(ip -4 addr show docker0 | grep -Po &#39;inet \\K[\\d.]+&#39;)# docker compose up -d --force-recreate Run the script.sh using the following command. source ./script.sh Now you can access the service on your host machine from the docker container using host.docker.internal instead of localhost. " }, { "title": "Setting up your new domain", "url": "/posts/basics-of-setup-domain/", "categories": "homelab, domain, cloudflare", "tags": "homelab, domain, cloudflare, new-domain-setup", "date": "2022-05-30 18:33:00 +0530", "snippet": "Basics and setting up new domainWhat is a domain?For Example for https://www.divyashchauhan.com http/https : protocols www : subdomain divyanshchauhan : domain com : domain extensionYou can have one domain for your main website which is called apex domain like https://divyashchauhan.com and then you can have subdomains for your other websites like https://blog.divyashchauhan.com/So buy a domain name and then you can have subdomains for your other websites by pointing all these apex and subdomains to different servers ip addresses.Setting up cloudflare for your domainBuy a domain from anywhere then create a cloudflare account then click on add site and then add the domain name in cloudlare dashboard.It will give you cloudflare nameservers for your domain, then you have to add these to your custom DNS nameservers field in settings menu of the domain provider from which you purchased.It will take some time for cloudflare. Ideally it should take around 10 minutes.Cloudflare will show Cloudflare is now protecting your site in the dashboard for your domain.Then go into DNS and you can see the nameservers we added will show up unser nameservers section.Now in DNS section, if you have some A records pointing to some IP address then delete them and then create new A records and point them to your servers ip addresses.SSL/TLS SectionUnder Overview: Best if Full (It encrypts both sides of the communication. Client to website and website to server.) Select Full (Srtict) (It will only work when you have Cloudflare SSL cetificate installed on server also) If full strict is selected then check your website if invalid SSL error occurs then go with full mode. Flexible means only client to website is encrypted. Check SSL/TLS Recommender. Under Edge Certificates: Check Always Use HTTPSEmail ForwardingCan set up email forwarding for your custom domain email address like connect@divyanshchauhan.com to your email address." }, { "title": "Setting up docs site on GitHub Pages using Jekyll", "url": "/posts/running-site-on-github-pages/", "categories": "homelab, github-pages", "tags": "homelab, servers", "date": "2022-05-30 15:52:00 +0530", "snippet": "Using Jekyll: The Static Site Generator to build our websiteInstall Dependenciessudo apt updatesudo apt install ruby-full build-essential zlib1g-dev gitInstall Jekyll bundlergem install jekyll bundlerCreating a site based on Chirpy Starter ThemeVisit https://github.com/cotes2020/jekyll-theme-chirpy#quick-start for step by step instructions or click on Chirpy Starter on their page to automate the flow.Repo name should be &amp;lt;YOUR-USER-NAME&amp;gt;.github.ioAfter creating a site (forking repo) based on the template, clone your repository to your local machine.git clone git@&amp;lt;YOUR-USER-NAME&amp;gt;/&amp;lt;YOUR-REPO-NAME&amp;gt;.gitthen install your dependencies:cd repo-namebundleMake changes in _config.yml filetimezone: Asia/Kolkatatitle: HomeLab Docstagline: A Doc site for my homelabdescription: A Doc site for my homelab.url: &quot;https://divyanshc.github.io/&quot;theme_mode: darkavatar: &amp;lt;URL-of-Profile-Photo&amp;gt;Profile photo url can be taken from facebook, twitter.Adding a new post to your site:create a new file in the _posts directory.File name should be in the format of YYYY-MM-DD-TITLE-OF-POST.mdImage from asset:... which is shown in the screenshot below:![A screenshot](/assets/screenshot.jpg)Linking to a file:... you can [download the PDF](/assets/diagram.pdf) here.Check the Jekyll Pages for more information about Local Linking of Files (Assets).All content should be in markdown format. Check Markdown Cheatsheet for more information.Running the site locally and pushing to GitHubServing your site locally is as simple as running the following command:bundle exec jekyll sThis will start the server on port 4000. http://127.0.0.1:4000/ will be your site.After making changes to your site, commit and push then up to git on main branchgit add .git commit -m &quot;feat(post): &amp;lt;POST-TITLE&amp;gt;&quot;git push origin mainThis site already has github actions configured, this uses CI/CD to automatically get your site from the main branch by updating gh-pages branch.Just push to the main branch and it will automatically build and deploy from the gh-pages branch.Check the Actions tab on your repo for more information.Change these settings in repo settings Your repo should be set to Public Go to pages tab in repo settings and set Source to gh-pages, then click on Save (push on main branch only) Check Enforce HTTPSYour site will be available at https://&amp;lt;YOUR-USER-NAME&amp;gt;.github.io/Adding Custom DomainApex Domain :You can add an apex domain or sub-domain of your site. Github will redirect the traffic to your site from https://&amp;lt;YOUR-USER-NAME&amp;gt;.github.io/ also.Got to Settings &amp;gt; Pages &amp;gt; Custom Domain &amp;gt; Add your custom domain name &amp;gt; SaveCreate A records, point your apex domain to the IP addresses for GitHub Pages.Add new record: Type: A Name: @ for no subdomain or subdomain name IP Address: ****185.199.108.153185.199.109.153185.199.110.153185.199.111.153Add records with all four using name as @ and www subdomain.Check if DNS configuration is correct:dig DIVYANSHCHAUHAN.COM +noall +answer -t AIf cloudflare is your nameserver then you will see some cloudflare IP addresses not of github pages that we added.This will commit a cname file in ‘gh-pages’ branch which will get removed after new commit takes place so update it in config.yml file.url: &quot;https://divyanshchauhan.com&quot;This will add a cname file in ‘gh-pages’ branch automatically on commit.Check Enforce HTTPS field in repo Settings &amp;gt; Pages. (It can take upto 24 hours before this option is available.)Sub-Domain:Add a CNAME record in cloudflare DNS for your sub-domain.Add new record: subdomain name: &amp;lt;SUB-DOMAIN-NAME&amp;gt; (e.g. docs) IPv4 address: https://&amp;lt;YOUR-USER-NAME&amp;gt;.github.io/ (e.g. https://divyanshc.github.io/) On Github Repo &amp;gt; Got to Settings &amp;gt; Pages &amp;gt; Custom Domain &amp;gt; Add your custom domain name &amp;gt; Save custom domain name: &amp;lt;SUB-DOMAIN-NAME&amp;gt;.divyanshchauhan.com (e.g. docs.divyanshchauhan.com)Add this to config.yml file:url: &quot;https://docs.divyanshchauhan.com&quot;Verify you Domain in GithubThis will only allow your github account to host site using github pages on this verified domain or its subdomains.Got to github main Settings under Profile &amp;gt; Code, planning, and automation &amp;gt; Pages &amp;gt; Add domain.Follow the process to add a domain.Check if TXT record added in DNS.dig _github-pages-challenge-USERNAME.example.com +nostats +nocomments +nocmd TXTUSERNAME: &amp;lt;YOUR-GITHUB-USER-NAME&amp;gt;example: &amp;lt;YOUR-DOMAIN-NAME&amp;gt;Check Github Docs for more information on how to setup custom domain.Self Hoting the siteBuilding your site in production mode to get output to _site folder to deploy it ourselves:JEKYLL_ENV=production bundle exec jekyll bUsing DockerCreate a Dockerfile with the following:FROM nginx:stable-alpineCOPY _site /usr/share/nginx/htmlBuild the image:docker build .Be sure to ⭐ the jekyll repo and the Chrirpy theme repo" }, { "title": "Hello Homelab", "url": "/posts/hello-homelab/", "categories": "homelab", "tags": "homelab, servers", "date": "2022-05-30 15:21:00 +0530", "snippet": "Hey there!This is my first page on Homelab.console.log(&quot;Hey there!&quot;);print(&quot;Hey there!&quot;)" } ]
